import os
from dotenv import load_dotenv
import discord
from discord import app_commands
from discord.ext import commands
import random
import 
load_dotenv()
token = os.getenv('TOKEN_BOT_DISCORD')

# Intents et configuration du bot
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!!", intents=intents)

# Correspondance entre le r√©sultat et les emojis de d√©s
DICE_EMOJIS = {
    1: "üé≤1Ô∏è‚É£",
    2: "üé≤2Ô∏è‚É£",
    3: "üé≤3Ô∏è‚É£",
    4: "üé≤4Ô∏è‚É£",
    5: "üé≤5Ô∏è‚É£",
    6: "üé≤6Ô∏è‚É£"
}

# Dictionnaire pour stocker les r√¥les des membres qui quittent
ancien_roles = {}

@bot.event
async def on_ready():
    """S'ex√©cute lorsque le bot est pr√™t."""
    print(f"Connect√© en tant que {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"Commandes slash synchronis√©es : {len(synced)}")
    except Exception as e:
        print(f"Erreur lors de la synchronisation des commandes : {e}")


#------------------------------------------------------------------------- R√¥les automatis√©s quand un membre rejoint/part
@bot.event
async def on_member_remove(member):
    """Quand un membre quitte le serveur, on stocke ses r√¥les."""
    ancien_roles[member.id] = [role.id for role in member.roles if role.id != member.guild.id]

@bot.event
async def on_member_join(member):
    """Quand un membre rejoint le serveur, on lui r√©attribue ses r√¥les."""
    if member.id in ancien_roles:
        roles_to_add = [discord.utils.get(member.guild.roles, id=role_id) for role_id in ancien_roles[member.id]]
        roles_to_add = [role for role in roles_to_add if role is not None]  # Filtrer les r√¥les valides

        if roles_to_add:
            await member.add_roles(*roles_to_add)
            print(f"R√¥les r√©attribu√©s √† {member.display_name}")


#------------------------------------------------------------------------- Jeux : Lancer de d√©s
@bot.tree.command(name="roll", description="Lancer un ou plusieurs d√©s.")
@app_commands.describe(nombre="Nombre de d√©s √† lancer (max 20)")
async def roll_slash(interaction: discord.Interaction, nombre: int = 1):
    await roll_logic(interaction, nombre, is_slash=True)


@bot.command(name="roll")
async def roll(ctx, nombre: int = 1):
    await roll_logic(ctx, nombre, is_slash=False)


async def roll_logic(target, nombre: int, is_slash: bool):
    """Logique commune pour le lancer de d√©s."""
    if nombre <= 0:
        message = "‚ö†Ô∏è Le nombre de d√©s doit √™tre sup√©rieur √† 0."
        await (target.response.send_message(message, ephemeral=True) if is_slash else target.send(message))
        return
    if nombre > 20:
        message = "‚ö†Ô∏è Je ne peux pas lancer plus de 20 d√©s √† la fois."
        await (target.response.send_message(message, ephemeral=True) if is_slash else target.send(message))
        return

    # Lancer les d√©s
    dice_results = [random.randint(1, 6) for _ in range(nombre)]
    dice_emojis = [DICE_EMOJIS[result] for result in dice_results]
    results_message = " | ".join(dice_emojis)
    total = sum(dice_results)  # Calculer la somme des d√©s

    message = f"üé≤ R√©sultats des {nombre} d√©s : {results_message}\n‚ú® Total : {total}"
    await (target.response.send_message(message) if is_slash else target.send(message))


#------------------------------------------------------------------------- Jeux : Pierre, Feuille, Ciseaux
@bot.tree.command(name="pierre-feuille-ciseaux", description="Joue √† Pierre-Feuille-Ciseaux avec le bot.")
@app_commands.describe(choix="Votre choix : pierre, feuille ou ciseaux")
async def pfc_slash(interaction: discord.Interaction, choix: str):
    await pfc_logic(interaction, choix, is_slash=True)


@bot.command(name="pfc")
async def pfc(ctx, choix: str):
    await pfc_logic(ctx, choix, is_slash=False)


async def pfc_logic(target, choix: str, is_slash: bool):
    """Logique commune pour Pierre-Feuille-Ciseaux."""
    options = {
        "pierre": "ü™®",
        "feuille": "üßª",
        "ciseaux": "‚úÇÔ∏è"
    }

    # V√©rifier si le choix est valide
    if choix.lower() not in options:
        message = "Choix invalide ! Choisissez entre `pierre`, `feuille` ou `ciseaux`."
        await (target.response.send_message(message, ephemeral=True) if is_slash else target.send(message))
        return

    # Le bot fait un choix al√©atoire
    bot_choice = random.choice(list(options.keys()))

    # D√©terminer le gagnant
    if choix.lower() == bot_choice:
        result = "√âgalit√© ! üòê"
    elif (choix.lower() == "pierre" and bot_choice == "ciseaux") or \
         (choix.lower() == "feuille" and bot_choice == "pierre") or \
         (choix.lower() == "ciseaux" and bot_choice == "feuille"):
        result = "Tu as gagn√© ! üéâ"
    else:
        result = "Le bot a gagn√© ! üòé"

    message = (
        f"Tu as choisi {options[choix.lower()]} (`{choix}`), "
        f"le bot a choisi {options[bot_choice]} (`{bot_choice}`).\n{result}"
    )
    await (target.response.send_message(message) if is_slash else target.send(message))


#------------------------------------------------------------------------- Commandes de mod√©ration : addrole et removerole
@bot.tree.command(name="addrole", description="Ajouter un r√¥le √† un utilisateur.")
@app_commands.describe(membre="L'utilisateur √† qui ajouter le r√¥le", role="Le r√¥le √† ajouter")
async def addrole_slash(interaction: discord.Interaction, membre: discord.Member, role: discord.Role):
    await role_logic(interaction, membre, role, action="add", is_slash=True)


@bot.command(name="addrole")
async def addrole(ctx, membre: discord.Member, role: discord.Role):
    await role_logic(ctx, membre, role, action="add", is_slash=False)


@bot.tree.command(name="removerole", description="Retirer un r√¥le d'un utilisateur.")
@app_commands.describe(membre="L'utilisateur √† qui retirer le r√¥le", role="Le r√¥le √† retirer")
async def removerole_slash(interaction: discord.Interaction, membre: discord.Member, role: discord.Role):
    await role_logic(interaction, membre, role, action="remove", is_slash=True)


@bot.command(name="removerole")
async def removerole(ctx, membre: discord.Member, role: discord.Role):
    await role_logic(ctx, membre, role, action="remove", is_slash=False)


async def role_logic(target, membre: discord.Member, role: discord.Role, action: str, is_slash: bool):
    """Logique commune pour ajouter ou retirer un r√¥le."""
    try:
        if action == "add":
            if role in membre.roles:
                message = f"{membre.mention} a d√©j√† le r√¥le {role.mention}. ‚úÖ"
            else:
                await membre.add_roles(role)
                message = f"Le r√¥le {role.mention} a √©t√© ajout√© √† {membre.mention} avec succ√®s ! üéâ"
        elif action == "remove":
            if role not in membre.roles:
                message = f"{membre.mention} n'a pas le r√¥le {role.mention}. ‚ùå"
            else:
                await membre.remove_roles(role)
                message = f"Le r√¥le {role.mention} a √©t√© retir√© √† {membre.mention} avec succ√®s ! ‚úÖ"

        await (target.response.send_message(message) if is_slash else target.send(message))
    except discord.Forbidden:
        message = "‚ùå Je n'ai pas les permissions n√©cessaires pour effectuer cette action."
        await (target.response.send_message(message, ephemeral=True) if is_slash else target.send(message))


#------------------------------------------------------------------------- Lancement du bot
bot.run(token)
